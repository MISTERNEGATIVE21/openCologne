/* Generated by Yosys 0.36+58 (git sha1 ea7818d31, c++ 11.4.0-1ubuntu1~22.04 -fPIC -Os) */

module dac_prep(clk, clk_dac, channel_valid, channel_l, channel_r, sample_valid, sample_l, sample_r);
  wire _000_;
  wire [15:0] _001_;
  wire [15:0] _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  input [15:0] channel_l;
  wire [15:0] channel_l;
  input [15:0] channel_r;
  wire [15:0] channel_r;
  input channel_valid;
  wire channel_valid;
  input clk;
  wire clk;
  input clk_dac;
  wire clk_dac;
  output [23:0] sample_l;
  wire [23:0] sample_l;
  wire [23:0] sample_opl3_l_p1;
  wire [23:0] sample_opl3_r_p1;
  output [23:0] sample_r;
  wire [23:0] sample_r;
  output sample_valid;
  wire sample_valid;
  wire sample_valid_opl3_p1;
  CC_BUFG _006_ (
    .I(_000_),
    .O(_004_)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _007_ (
    .CLK(_004_),
    .D(_001_[0]),
    .EN(1'h1),
    .Q(sample_opl3_l_p1[6]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _008_ (
    .CLK(_004_),
    .D(_001_[1]),
    .EN(1'h1),
    .Q(sample_opl3_l_p1[7]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _009_ (
    .CLK(_004_),
    .D(_001_[2]),
    .EN(1'h1),
    .Q(sample_opl3_l_p1[8]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _010_ (
    .CLK(_004_),
    .D(_001_[3]),
    .EN(1'h1),
    .Q(sample_opl3_l_p1[9]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _011_ (
    .CLK(_004_),
    .D(_001_[4]),
    .EN(1'h1),
    .Q(sample_opl3_l_p1[10]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _012_ (
    .CLK(_004_),
    .D(_001_[5]),
    .EN(1'h1),
    .Q(sample_opl3_l_p1[11]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _013_ (
    .CLK(_004_),
    .D(_001_[6]),
    .EN(1'h1),
    .Q(sample_opl3_l_p1[12]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _014_ (
    .CLK(_004_),
    .D(_001_[7]),
    .EN(1'h1),
    .Q(sample_opl3_l_p1[13]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _015_ (
    .CLK(_004_),
    .D(_001_[8]),
    .EN(1'h1),
    .Q(sample_opl3_l_p1[14]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _016_ (
    .CLK(_004_),
    .D(_001_[9]),
    .EN(1'h1),
    .Q(sample_opl3_l_p1[15]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _017_ (
    .CLK(_004_),
    .D(_001_[10]),
    .EN(1'h1),
    .Q(sample_opl3_l_p1[16]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _018_ (
    .CLK(_004_),
    .D(_001_[11]),
    .EN(1'h1),
    .Q(sample_opl3_l_p1[17]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _019_ (
    .CLK(_004_),
    .D(_001_[12]),
    .EN(1'h1),
    .Q(sample_opl3_l_p1[18]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _020_ (
    .CLK(_004_),
    .D(_001_[13]),
    .EN(1'h1),
    .Q(sample_opl3_l_p1[19]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _021_ (
    .CLK(_004_),
    .D(_001_[14]),
    .EN(1'h1),
    .Q(sample_opl3_l_p1[20]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _022_ (
    .CLK(_004_),
    .D(_001_[15]),
    .EN(1'h1),
    .Q(sample_opl3_l_p1[23]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _023_ (
    .CLK(_004_),
    .D(_003_),
    .EN(1'h1),
    .Q(sample_valid_opl3_p1),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _024_ (
    .CLK(_004_),
    .D(_002_[0]),
    .EN(1'h1),
    .Q(sample_opl3_r_p1[6]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _025_ (
    .CLK(_004_),
    .D(_002_[1]),
    .EN(1'h1),
    .Q(sample_opl3_r_p1[7]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _026_ (
    .CLK(_004_),
    .D(_002_[2]),
    .EN(1'h1),
    .Q(sample_opl3_r_p1[8]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _027_ (
    .CLK(_004_),
    .D(_002_[3]),
    .EN(1'h1),
    .Q(sample_opl3_r_p1[9]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _028_ (
    .CLK(_004_),
    .D(_002_[4]),
    .EN(1'h1),
    .Q(sample_opl3_r_p1[10]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _029_ (
    .CLK(_004_),
    .D(_002_[5]),
    .EN(1'h1),
    .Q(sample_opl3_r_p1[11]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _030_ (
    .CLK(_004_),
    .D(_002_[6]),
    .EN(1'h1),
    .Q(sample_opl3_r_p1[12]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _031_ (
    .CLK(_004_),
    .D(_002_[7]),
    .EN(1'h1),
    .Q(sample_opl3_r_p1[13]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _032_ (
    .CLK(_004_),
    .D(_002_[8]),
    .EN(1'h1),
    .Q(sample_opl3_r_p1[14]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _033_ (
    .CLK(_004_),
    .D(_002_[9]),
    .EN(1'h1),
    .Q(sample_opl3_r_p1[15]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _034_ (
    .CLK(_004_),
    .D(_002_[10]),
    .EN(1'h1),
    .Q(sample_opl3_r_p1[16]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _035_ (
    .CLK(_004_),
    .D(_002_[11]),
    .EN(1'h1),
    .Q(sample_opl3_r_p1[17]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _036_ (
    .CLK(_004_),
    .D(_002_[12]),
    .EN(1'h1),
    .Q(sample_opl3_r_p1[18]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _037_ (
    .CLK(_004_),
    .D(_002_[13]),
    .EN(1'h1),
    .Q(sample_opl3_r_p1[19]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _038_ (
    .CLK(_004_),
    .D(_002_[14]),
    .EN(1'h1),
    .Q(sample_opl3_r_p1[20]),
    .SR(1'h0)
  );
  CC_DFF #(
    .CLK_INV(1'h0),
    .EN_INV(1'h0),
    .INIT(1'h0),
    .SR_INV(1'h0),
    .SR_VAL(1'h0)
  ) _039_ (
    .CLK(_004_),
    .D(_002_[15]),
    .EN(1'h1),
    .Q(sample_opl3_r_p1[23]),
    .SR(1'h0)
  );
  CC_IBUF _040_ (
    .I(channel_l[0]),
    .Y(_001_[0])
  );
  CC_IBUF _041_ (
    .I(channel_l[1]),
    .Y(_001_[1])
  );
  CC_IBUF _042_ (
    .I(channel_l[10]),
    .Y(_001_[10])
  );
  CC_IBUF _043_ (
    .I(channel_l[11]),
    .Y(_001_[11])
  );
  CC_IBUF _044_ (
    .I(channel_l[12]),
    .Y(_001_[12])
  );
  CC_IBUF _045_ (
    .I(channel_l[13]),
    .Y(_001_[13])
  );
  CC_IBUF _046_ (
    .I(channel_l[14]),
    .Y(_001_[14])
  );
  CC_IBUF _047_ (
    .I(channel_l[15]),
    .Y(_001_[15])
  );
  CC_IBUF _048_ (
    .I(channel_l[2]),
    .Y(_001_[2])
  );
  CC_IBUF _049_ (
    .I(channel_l[3]),
    .Y(_001_[3])
  );
  CC_IBUF _050_ (
    .I(channel_l[4]),
    .Y(_001_[4])
  );
  CC_IBUF _051_ (
    .I(channel_l[5]),
    .Y(_001_[5])
  );
  CC_IBUF _052_ (
    .I(channel_l[6]),
    .Y(_001_[6])
  );
  CC_IBUF _053_ (
    .I(channel_l[7]),
    .Y(_001_[7])
  );
  CC_IBUF _054_ (
    .I(channel_l[8]),
    .Y(_001_[8])
  );
  CC_IBUF _055_ (
    .I(channel_l[9]),
    .Y(_001_[9])
  );
  CC_IBUF _056_ (
    .I(channel_r[0]),
    .Y(_002_[0])
  );
  CC_IBUF _057_ (
    .I(channel_r[1]),
    .Y(_002_[1])
  );
  CC_IBUF _058_ (
    .I(channel_r[10]),
    .Y(_002_[10])
  );
  CC_IBUF _059_ (
    .I(channel_r[11]),
    .Y(_002_[11])
  );
  CC_IBUF _060_ (
    .I(channel_r[12]),
    .Y(_002_[12])
  );
  CC_IBUF _061_ (
    .I(channel_r[13]),
    .Y(_002_[13])
  );
  CC_IBUF _062_ (
    .I(channel_r[14]),
    .Y(_002_[14])
  );
  CC_IBUF _063_ (
    .I(channel_r[15]),
    .Y(_002_[15])
  );
  CC_IBUF _064_ (
    .I(channel_r[2]),
    .Y(_002_[2])
  );
  CC_IBUF _065_ (
    .I(channel_r[3]),
    .Y(_002_[3])
  );
  CC_IBUF _066_ (
    .I(channel_r[4]),
    .Y(_002_[4])
  );
  CC_IBUF _067_ (
    .I(channel_r[5]),
    .Y(_002_[5])
  );
  CC_IBUF _068_ (
    .I(channel_r[6]),
    .Y(_002_[6])
  );
  CC_IBUF _069_ (
    .I(channel_r[7]),
    .Y(_002_[7])
  );
  CC_IBUF _070_ (
    .I(channel_r[8]),
    .Y(_002_[8])
  );
  CC_IBUF _071_ (
    .I(channel_r[9]),
    .Y(_002_[9])
  );
  CC_IBUF _072_ (
    .I(channel_valid),
    .Y(_003_)
  );
  CC_IBUF _073_ (
    .I(clk),
    .Y(_000_)
  );
  CC_IBUF _074_ (
    .I(clk_dac),
    .Y(_005_)
  );
  CC_OBUF _075_ (
    .A(1'h0),
    .O(sample_l[0])
  );
  CC_OBUF _076_ (
    .A(1'h0),
    .O(sample_l[1])
  );
  CC_OBUF _077_ (
    .A(sample_opl3_l_p1[10]),
    .O(sample_l[10])
  );
  CC_OBUF _078_ (
    .A(sample_opl3_l_p1[11]),
    .O(sample_l[11])
  );
  CC_OBUF _079_ (
    .A(sample_opl3_l_p1[12]),
    .O(sample_l[12])
  );
  CC_OBUF _080_ (
    .A(sample_opl3_l_p1[13]),
    .O(sample_l[13])
  );
  CC_OBUF _081_ (
    .A(sample_opl3_l_p1[14]),
    .O(sample_l[14])
  );
  CC_OBUF _082_ (
    .A(sample_opl3_l_p1[15]),
    .O(sample_l[15])
  );
  CC_OBUF _083_ (
    .A(sample_opl3_l_p1[16]),
    .O(sample_l[16])
  );
  CC_OBUF _084_ (
    .A(sample_opl3_l_p1[17]),
    .O(sample_l[17])
  );
  CC_OBUF _085_ (
    .A(sample_opl3_l_p1[18]),
    .O(sample_l[18])
  );
  CC_OBUF _086_ (
    .A(sample_opl3_l_p1[19]),
    .O(sample_l[19])
  );
  CC_OBUF _087_ (
    .A(1'h0),
    .O(sample_l[2])
  );
  CC_OBUF _088_ (
    .A(sample_opl3_l_p1[20]),
    .O(sample_l[20])
  );
  CC_OBUF _089_ (
    .A(sample_opl3_l_p1[23]),
    .O(sample_l[21])
  );
  CC_OBUF _090_ (
    .A(sample_opl3_l_p1[23]),
    .O(sample_l[22])
  );
  CC_OBUF _091_ (
    .A(sample_opl3_l_p1[23]),
    .O(sample_l[23])
  );
  CC_OBUF _092_ (
    .A(1'h0),
    .O(sample_l[3])
  );
  CC_OBUF _093_ (
    .A(1'h0),
    .O(sample_l[4])
  );
  CC_OBUF _094_ (
    .A(1'h0),
    .O(sample_l[5])
  );
  CC_OBUF _095_ (
    .A(sample_opl3_l_p1[6]),
    .O(sample_l[6])
  );
  CC_OBUF _096_ (
    .A(sample_opl3_l_p1[7]),
    .O(sample_l[7])
  );
  CC_OBUF _097_ (
    .A(sample_opl3_l_p1[8]),
    .O(sample_l[8])
  );
  CC_OBUF _098_ (
    .A(sample_opl3_l_p1[9]),
    .O(sample_l[9])
  );
  CC_OBUF _099_ (
    .A(1'h0),
    .O(sample_r[0])
  );
  CC_OBUF _100_ (
    .A(1'h0),
    .O(sample_r[1])
  );
  CC_OBUF _101_ (
    .A(sample_opl3_r_p1[10]),
    .O(sample_r[10])
  );
  CC_OBUF _102_ (
    .A(sample_opl3_r_p1[11]),
    .O(sample_r[11])
  );
  CC_OBUF _103_ (
    .A(sample_opl3_r_p1[12]),
    .O(sample_r[12])
  );
  CC_OBUF _104_ (
    .A(sample_opl3_r_p1[13]),
    .O(sample_r[13])
  );
  CC_OBUF _105_ (
    .A(sample_opl3_r_p1[14]),
    .O(sample_r[14])
  );
  CC_OBUF _106_ (
    .A(sample_opl3_r_p1[15]),
    .O(sample_r[15])
  );
  CC_OBUF _107_ (
    .A(sample_opl3_r_p1[16]),
    .O(sample_r[16])
  );
  CC_OBUF _108_ (
    .A(sample_opl3_r_p1[17]),
    .O(sample_r[17])
  );
  CC_OBUF _109_ (
    .A(sample_opl3_r_p1[18]),
    .O(sample_r[18])
  );
  CC_OBUF _110_ (
    .A(sample_opl3_r_p1[19]),
    .O(sample_r[19])
  );
  CC_OBUF _111_ (
    .A(1'h0),
    .O(sample_r[2])
  );
  CC_OBUF _112_ (
    .A(sample_opl3_r_p1[20]),
    .O(sample_r[20])
  );
  CC_OBUF _113_ (
    .A(sample_opl3_r_p1[23]),
    .O(sample_r[21])
  );
  CC_OBUF _114_ (
    .A(sample_opl3_r_p1[23]),
    .O(sample_r[22])
  );
  CC_OBUF _115_ (
    .A(sample_opl3_r_p1[23]),
    .O(sample_r[23])
  );
  CC_OBUF _116_ (
    .A(1'h0),
    .O(sample_r[3])
  );
  CC_OBUF _117_ (
    .A(1'h0),
    .O(sample_r[4])
  );
  CC_OBUF _118_ (
    .A(1'h0),
    .O(sample_r[5])
  );
  CC_OBUF _119_ (
    .A(sample_opl3_r_p1[6]),
    .O(sample_r[6])
  );
  CC_OBUF _120_ (
    .A(sample_opl3_r_p1[7]),
    .O(sample_r[7])
  );
  CC_OBUF _121_ (
    .A(sample_opl3_r_p1[8]),
    .O(sample_r[8])
  );
  CC_OBUF _122_ (
    .A(sample_opl3_r_p1[9]),
    .O(sample_r[9])
  );
  CC_OBUF _123_ (
    .A(sample_valid_opl3_p1),
    .O(sample_valid)
  );
  assign { sample_opl3_l_p1[22:21], sample_opl3_l_p1[5:0] } = { sample_opl3_l_p1[23], sample_opl3_l_p1[23], 6'h00 };
  assign { sample_opl3_r_p1[22:21], sample_opl3_r_p1[5:0] } = { sample_opl3_r_p1[23], sample_opl3_r_p1[23], 6'h00 };
endmodule
